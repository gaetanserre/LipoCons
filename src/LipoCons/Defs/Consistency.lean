/-
 - Created in 2025 by Ga√´tan Serr√©
-/

import LipoCons.Defs.Algorithm
import LipoCons.Defs.Lipschitz
import LipoCons.Defs.NPos
import LipoCons.Utils.Compact
import Mathlib.Analysis.Normed.Order.Lattice

set_option maxHeartbeats 0

variable {Œ± : Type*} [PseudoMetricSpace Œ±]

/-! Given a sequence `u` and a element `x`, returns `min_(0 ‚â§ i < n) dist (u i) x. -/
noncomputable def min_dist_x :=
  fun {n : ‚Ñï} (u : Fin n ‚Üí Œ±) (x : Œ±) => Tuple.min ((fun xi => dist xi x) ‚àò u)

/-- `min_dist_x` is continuous -/
@[continuity]
lemma min_dist_x_continuous {n : ‚Ñï} (u : Fin n ‚Üí Œ±) : Continuous (min_dist_x u) := by
  by_cases h : n = 0
  ¬∑ haveI : ¬¨Nonempty (Fin n) := by
      rw [‚ÜêFin.pos_iff_nonempty]
      exact Eq.not_gt h
    let e := Classical.arbitrary ‚Ñù
    suffices h : min_dist_x u = fun x => e by rw [h]; exact continuous_const
    ext x
    unfold min_dist_x Tuple.min Fintype.min_image Fintype.min_image'
    split
    ¬∑ contradiction
    rfl

  have ne_fin : Nonempty (Fin n) := Fin.pos_iff_nonempty.mp (Nat.zero_lt_of_ne_zero h)

  have ne_univ : (Finset.univ : Finset (Fin n)).Nonempty := Finset.univ_nonempty_iff.mpr ne_fin
  set g := fun (i : Fin n) (x : Œ±) => dist (u i) x

  have continuous_inf_g : Continuous (Finset.univ.inf' ne_univ g) := by
    suffices h : ‚àÄ i ‚àà Finset.univ, Continuous (g i) from Continuous.finset_inf' ne_univ h
    intro i _
    fun_prop

  suffices h : min_dist_x u = Finset.univ.inf' ne_univ g by rwa [h]
  ext x
  unfold min_dist_x Tuple.min Fintype.min_image Fintype.min_image'
  split
  ¬∑ simp only [Function.comp_apply, Finset.inf'_apply, g]
  ¬∑ contradiction

/- lemma min_dist_x_continuous' (n : ‚Ñï) : Continuous (min_dist_x (Œ± := Œ±) (n := n)) := by
  refine continuous_pi ?_
  intro i
  exact?

  sorry -/

variable [CompactSpace Œ±] [Nonempty Œ±] {Œ≤ : Type*} [Nonempty Œ≤] [PseudoMetricSpace Œ≤]
  [LinearOrder Œ≤] [ClosedIciTopology Œ≤] [ClosedIicTopology Œ≤]

/-- The maximum of a Lipschitz function over `Œ±`. -/
noncomputable def fmax {f : Œ± ‚Üí Œ≤} (hf : Lipschitz f) := f (compact_argmax hf.continuous)
noncomputable def fmin {f : Œ± ‚Üí Œ≤} (hf : Lipschitz f) := f (compact_argmin hf.continuous)

variable [MeasurableSpace Œ±]

/-! The set of sequences of size `n` such that the maximum of `f` over
these sequences is at least `Œµ` away from from `fmax`. -/
def set_dist_max {f : Œ± ‚Üí Œ≤} (hf : Lipschitz f) {n : ‚Ñï} (Œµ : ‚Ñù) : Set (Fin n ‚Üí Œ±) :=
  {u | dist (Tuple.max (f ‚àò u)) (fmax hf) > Œµ}

/-! Given an algorithm `A`, the function that, given `Œµ` and `n`, returns
the measure of the set of sequences of size `n` such that the maximum of
`f` over these sequences is at least `Œµ` away from from `fmax`. -/
def measure_dist_max (A : Algorithm Œ± Œ≤) {f : Œ± ‚Üí Œ≤} (hf : Lipschitz f) :=
  fun Œµ n => A.Œº f n (set_dist_max hf Œµ)

open Filter Topology
/-! **Main definition**: An algorithm `A` is consistent over a Lipschitz function `f`
if for any `Œµ > 0`, `lim_(n ‚Üí ‚àû) measure_dist_max n = 0`. -/
def isConsistent (A : Algorithm Œ± Œ≤) {f : Œ± ‚Üí Œ≤} (hf : Lipschitz f) : Prop :=
  ‚àÄ ‚¶ÉŒµ‚¶Ñ, 0 < Œµ ‚Üí Tendsto (measure_dist_max A hf Œµ) atTop (ùìù 0)

/-! An algorithm `A` is consistent over all Lipschitz functions. -/
def isConsistentOverLipschitz (A : Algorithm Œ± Œ≤) {f : Œ± ‚Üí Œ≤} (hf : Lipschitz f) : Prop :=
  isConsistent A hf

/-! Given a sequence `u`, maximum over `Œ±` of `min_dist_x u`: the maximum distance between
any element in `Œ±` and `u`. -/
noncomputable def max_min_dist {n : ‚Ñï} (u : Fin n ‚Üí Œ±) :=
  min_dist_x u (compact_argmax (min_dist_x_continuous u))

lemma max_min_dist_continuous {n : ‚Ñï‚ÇÄ} : Continuous (max_min_dist (n := n) (Œ± := Œ±)) := by
  /- have : ‚àÄ (u : Fin n ‚Üí Œ±), Continuous (min_dist_x u) :=
    fun u ‚Ü¶ min_dist_x_continuous u
  refine Continuous.comp' (by exact?) ?_ -/
  let f := fun u : Fin n ‚Üí Œ± => compact_argmax (min_dist_x_continuous u)
  have t : ‚àÄ u1 u2, dist (max_min_dist u1) (max_min_dist u2) ‚â§ dist u1 u2 + dist (f u1) (f u2) := by
    intro u1 u2
    unfold max_min_dist
    set x1 := compact_argmax (min_dist_x_continuous u1)
    set x2 := compact_argmax (min_dist_x_continuous u2)
    rw [show f u1 = x1 by rfl]
    rw [show f u2 = x2 by rfl]
    unfold min_dist_x
    obtain ‚ü®i1, hi1‚ü© := Tuple.argmin (fun xi ‚Ü¶ dist xi x1) n.2 u1
    obtain ‚ü®i2, hi2‚ü© := Tuple.argmin (fun xi ‚Ü¶ dist xi x2) n.2 u2
    rw [‚Üêhi1, ‚Üêhi2]
    have : 0 ‚â§ dist (u1 i1) x1 - dist (u2 i2) x2 := by sorry
    show |dist (u1 i1) x1 - dist (u2 i2) x2| ‚â§ dist u1 u2 + dist x1 x2
    rw [abs_of_nonneg this]
    suffices dist (u1 i1) x1 ‚â§ dist u1 u2 + dist x1 x2 + dist (u2 i2) x2 from
      (OrderedSub.tsub_le_iff_right _ _ _).mpr this

    let i := (Tuple.dist_exists n.2 u1 u2).choose
    have di : dist u1 u2 = dist (u1 i) (u2 i) :=
      (Tuple.dist_exists n.2 u1 u2).choose_spec
    rw [di]

    have : ‚àÄ i, dist (u1 i1) x1 ‚â§ dist (u1 i) x1 :=



    sorry

  have : Continuous f := by sorry

  rw [Metric.continuous_iff]
  intro u1 Œµ Œµ_pos

  have Œµ_4_pos : 0 < Œµ / 4 := by
    rw [show Œµ / 4 = Œµ / 2 / 2 by ring]
    exact half_pos (half_pos Œµ_pos)
  obtain ‚ü®Œ¥, Œ¥_pos, hŒ¥‚ü© := Metric.continuous_iff.mp this u1 (Œµ / 4) Œµ_4_pos
  refine ‚ü®min Œ¥ (Œµ/4), ?_, ?_‚ü©
  ¬∑ show 0 < min Œ¥ (Œµ / 4)
    rw [lt_min_iff]
    exact ‚ü®Œ¥_pos, Œµ_4_pos‚ü©
  intro u2 hu2
  have : dist u2 u1 < Œ¥ := by
    rw [lt_min_iff] at hu2
    exact hu2.1
  specialize hŒ¥ u2 this
  have : dist u2 u1 < Œµ/4 := by
    rw [lt_min_iff] at hu2
    exact hu2.2
  rw [dist_comm]
  specialize t u1 u2
  calc _ ‚â§ dist u1 u2 + dist (f u1) (f u2) := t
  _ < Œµ/4 + dist (f u1) (f u2) := by
    rw [dist_comm] at this
    exact (add_lt_add_iff_right (dist (f u1) (f u2))).mpr this
  _ < Œµ/4 + Œµ/4 := by
    rw [dist_comm] at hŒ¥
    exact (Real.add_lt_add_iff_left (Œµ / 4)).mpr hŒ¥
  _ = Œµ/2 := by ring
  _ < Œµ := div_two_lt_of_pos Œµ_pos


  /- suffices LipschitzWith 1 max_min_dist from this.continuous
  refine LipschitzWith.of_le_add ?_
  intro u1 u2
  let i := (Tuple.dist_exists n.2 u1 u2).choose
  have di : dist u1 u2 = dist (u1 i) (u2 i) :=
    (Tuple.dist_exists n.2 u1 u2).choose_spec
  rw [di]
  simp [max_min_dist]
  set x1 := compact_argmax (min_dist_x_continuous u1)
  set x2 := compact_argmax (min_dist_x_continuous u2)
  have : |min_dist_x u1 x1 - min_dist_x u1 x2| ‚â§ |dist u1 u2 + dist x1 x2| := by sorry -/
  --have : ‚àÄ u1, ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ u2, dist u1 u2 < Œ¥ ‚Üí dist

  /- refine Metric.continuous_iff.mpr ?_
  intro u‚ÇÅ Œµ Œµ_pos
  refine ‚ü®Œµ, Œµ_pos, ?_‚ü©
  intro u‚ÇÇ hu‚ÇÅu‚ÇÇ
  let i := (Tuple.dist_exists n.2 u‚ÇÇ u‚ÇÅ).choose
  have di : dist u‚ÇÇ u‚ÇÅ = dist (u‚ÇÇ i) (u‚ÇÅ i) :=
    (Tuple.dist_exists n.2 u‚ÇÇ u‚ÇÅ).choose_spec
  rw [di] at hu‚ÇÅu‚ÇÇ
  simp [max_min_dist]
  replace hu‚ÇÅu‚ÇÇ : dist (u‚ÇÇ i) (u‚ÇÅ i) < Œµ := hu‚ÇÅu‚ÇÇ
  set x‚ÇÇ := compact_argmax (min_dist_x_continuous u‚ÇÇ)
  set x‚ÇÅ := compact_argmax (min_dist_x_continuous u‚ÇÅ)
  have : ‚àÄ j, dist (u‚ÇÇ j) (u‚ÇÅ j) ‚â§ dist (u‚ÇÇ i) (u‚ÇÅ i) := Tuple.dist_exists_le n.2 u‚ÇÇ u‚ÇÅ
  have : ‚àÄ x, min_dist_x u‚ÇÇ x ‚â§ min_dist_x u‚ÇÇ x‚ÇÇ :=
    fun x => compact_argmax_apply (min_dist_x_continuous u‚ÇÇ) x
  have : ‚àÄ x, min_dist_x u‚ÇÅ x ‚â§ min_dist_x u‚ÇÅ x‚ÇÅ :=
    fun x => compact_argmax_apply (min_dist_x_continuous u‚ÇÅ) x -/

  --sorry




/-! **Main definition**: Given a function `f`, an algorithm `A` sample the whole space
if `‚àÄ Œµ > 0, lim_(n ‚Üí ‚àû) A.Œº f n {u | max_min_dist u > Œµ} = 0`. -/
noncomputable def sample_whole_space (A : Algorithm Œ± Œ≤) (f : Œ± ‚Üí Œ≤) : Prop :=
  ‚àÄ Œµ > 0, Tendsto (fun n => A.Œº f n {u | max_min_dist u > Œµ}) atTop (ùìù 0)

open unitInterval
