/-
 - Created in 2025 by Ga√´tan Serr√©
-/

import ConsistencyGO.Algorithm
import ConsistencyGO.Utils.Compact
import ConsistencyGO.Utils.Tendsto
import Mathlib.Analysis.Normed.Order.Lattice

variable {Œ± : Type*} [PseudoMetricSpace Œ±]

/--
Given a sequence `u` and a element `x`, returns `min_(0 ‚â§ i < n) dist (u i) x.
-/
noncomputable def min_dist_x :=
  fun {n : ‚Ñï} (u : Fin n ‚Üí Œ±) (x : Œ±) => Tuple.min ((fun xi => dist xi x) ‚àò u)

/--
`min_dist_x` is continuous
-/
lemma min_dist_x_continuous {n : ‚Ñï} (u : Fin n ‚Üí Œ±) : Continuous (min_dist_x u) := by
  by_cases h : n = 0
  ¬∑ have empty : ¬¨Nonempty (Fin n) := by
      rw [‚ÜêFin.pos_iff_nonempty]
      exact Eq.not_gt h
    let e : ‚Ñù := instNonemptyOfInhabited.some
    suffices h : min_dist_x u = fun x => e by rw [h]; exact continuous_const
    ext x
    unfold min_dist_x Tuple.min Fintype.min_image Fintype.min_image'
    split
    ¬∑ contradiction
    rfl

  have ne_fin : Nonempty (Fin n) := Fin.pos_iff_nonempty.mp (Nat.zero_lt_of_ne_zero h)
  have ne : (Finset.univ : Finset (Fin n)).Nonempty :=
    Finset.univ_nonempty_iff.mpr ne_fin

  set g := fun (i : Fin n) (x : Œ±) => dist (u i) x

  have continuous_inf_g : Continuous (Finset.univ.inf' ne g) := by
    suffices h : ‚àÄ i ‚àà Finset.univ, Continuous (g i) from Continuous.finset_inf' ne h
    intro i _
    exact Continuous.dist continuous_const continuous_id

  suffices h : min_dist_x u = Finset.univ.inf' ne g by rwa [h]
  ext x
  unfold min_dist_x Tuple.min Fintype.min_image Fintype.min_image'
  split
  ¬∑ simp only [Function.comp_apply, Finset.inf'_apply, g]
  contradiction

variable {Œ© : Set Œ±} [CompactSpace Œ©] [Nonempty Œ©]
variable {Œ≤ : Type*} [Nonempty Œ≤] [PseudoMetricSpace Œ≤] [LinearOrder Œ≤] [ClosedIciTopology Œ≤]

/--
The maximum of a continuous function over `Œ±`.
-/
noncomputable def fmax {f : Œ© ‚Üí Œ≤} (cont : Continuous f) := f (compact_argmax cont)

variable [MeasurableSpace Œ±]

/--
Given an algorithm `A`, the function that, given `Œµ` and `n`, returns
the measure of the set of sequences of size `n` such that the maximum of
`f` over these sequences is at least `Œµ` away from from `fmax`.
-/
def measure_dist_max (A : Algorithm Œ© Œ≤) {f : Œ© ‚Üí Œ≤} (cont : Continuous f) :=
  fun Œµ n => A.Œº f n {u | dist (Tuple.max (f ‚àò u)) (fmax cont) > Œµ}


open Filter Topology
/--
**Main definition**: An algorithm `A` is consistent over `f`
if for any `Œµ > 0`, `lim_(n ‚Üí ‚àû) measure_dist_max n = 0`.
-/
def isConsistent (A : Algorithm Œ© Œ≤) {f : Œ© ‚Üí Œ≤} (cont : Continuous f) : Prop :=
  ‚àÄ Œµ > 0, Tendsto (measure_dist_max A cont Œµ) atTop (ùìù 0)

/--
The set of all Lipschitz functions.
-/
def all_lipschitz := {f : Œ© ‚Üí Œ≤ | ‚àÉ Œ∫, LipschitzWith Œ∫ f}

/--
An algorithm `A` is consistent over all Lipschitz functions.
-/
def isConsistentOverLipschitz (A : Algorithm Œ© Œ≤) {f : Œ© ‚Üí Œ≤} (hf : f ‚àà all_lipschitz) : Prop :=
  isConsistent A hf.choose_spec.continuous

/--
Given a sequence `u`, maximum over `Œ©` of `min_dist_x u`: the maximum distance between
any element in `Œ©` and `u`.
-/
noncomputable def max_min_dist {n : ‚Ñï} (u : Fin n ‚Üí Œ©) :=
  min_dist_x u (compact_argmax (min_dist_x_continuous u))

/--
**Main definition**: Given a function `f`, an algorithm `A` sample the whole space
if `‚àÄ Œµ > 0, lim_(n ‚Üí ‚àû) A.Œº f n {u | max_min_dist u > Œµ} = 0`.
-/
noncomputable def sample_whole_space (A : Algorithm Œ© Œ≤) (f : Œ© ‚Üí Œ≤) : Prop :=
  ‚àÄ Œµ > 0, Tendsto (fun n => A.Œº f n {u | max_min_dist u > Œµ}) atTop (ùìù 0)

lemma Œµ_cover_ne {Œµ : ‚Ñù} (hŒµ : Œµ > 0) {Œ± : Type*} [PseudoMetricSpace Œ±] (Œ© : Set Œ±)
    [Nonempty Œ©] [CompactSpace Œ©] :
    {n : nstar | ‚àÉ (t : Finset Œ©), t.card = n.1 ‚àß Set.univ = ‚ãÉ x ‚àà t, Metric.ball x Œµ}.Nonempty
    := by
  let U := fun (x : Œ©) => Metric.ball x Œµ
  have hU : ‚àÄ (x : Œ©), U x ‚àà nhds x := fun x => Metric.ball_mem_nhds x hŒµ
  obtain ‚ü®t, ht‚ü© := finite_cover_nhds hU
  refine ‚ü®‚ü®t.card, ?_‚ü©, t, rfl, ht.symm‚ü©
  by_contra h_contra
  have union_is_empty : ‚ãÉ x ‚àà t, U x = ‚àÖ := by
      rw [Finset.card_eq_zero.mp (Nat.eq_zero_of_le_zero <| Nat.le_of_not_lt h_contra)]
      simp only [Finset.not_mem_empty, Set.iUnion_of_empty, Set.iUnion_empty]
  rw [union_is_empty] at ht
  exact Set.empty_ne_univ ht
