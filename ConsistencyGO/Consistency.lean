/-
 - Created in 2025 by Ga√´tan Serr√©
-/

import ConsistencyGO.Algorithm
import ConsistencyGO.Compact
import ConsistencyGO.Utils
import Mathlib

open Tuple NNReal Filter Topology

variable {Œ± : Type*} [PseudoMetricSpace Œ±] {Œ© : Set Œ±}

/--
Given a sequence `u` and a element `x`, returns `min_(0 ‚â§ i < n) dist (u i) x.
-/
noncomputable def min_dist_x :=
  fun {n : ‚Ñï} (u : Fin n ‚Üí Œ©) (x : Œ©) => Tuple.min ((fun xi => dist xi x) ‚àò u)

/--
`min_dist_x` is continuous
-/
lemma min_dist_x_continuous {n : ‚Ñï} (u : Fin n ‚Üí Œ©) : Continuous (min_dist_x u) := by
  by_cases h : n = 0
  ¬∑ have empty : ¬¨Nonempty (Fin n) := by
      rw [‚ÜêFin.pos_iff_nonempty]
      exact Eq.not_gt h
    let e : ‚Ñù := instNonemptyOfInhabited.some
    suffices h : min_dist_x u = fun x => e by rw [h]; exact continuous_const
    ext x
    unfold min_dist_x Tuple.min Fintype.min_image Fintype.min_image'
    split
    ¬∑ contradiction
    rfl

  have ne_fin : Nonempty (Fin n) := Fin.pos_iff_nonempty.mp (Nat.zero_lt_of_ne_zero h)
  have ne : (Finset.univ : Finset (Fin n)).Nonempty :=
    Finset.univ_nonempty_iff.mpr ne_fin

  set g := fun (i : Fin n) (x : Œ©) => dist (u i) x

  have continuous_inf_g : Continuous (Finset.univ.inf' ne g) := by
    suffices h : ‚àÄ i ‚àà Finset.univ, Continuous (g i) from Continuous.finset_inf' ne h
    intro i _
    exact Continuous.dist continuous_const continuous_id

  suffices h : min_dist_x u = Finset.univ.inf' ne g by rwa [h]
  ext x
  unfold min_dist_x Tuple.min Fintype.min_image Fintype.min_image'
  split
  ¬∑ simp only [Function.comp_apply, Finset.inf'_apply, g]
  contradiction

/-
We define two spaces `Œ±` and `Œ≤` with topological properties and we define
a continuous function `f` over a compact set of `Œ±`, `Œ©`.
-/
variable {Œ≤ : Type*} [MeasurableSpace Œ±]
[Nonempty Œ≤] [Dist Œ≤] [LinearOrder Œ≤] [PseudoMetricSpace Œ≤]
[ClosedIciTopology Œ≤] [ClosedIicTopology Œ≤]
[Nonempty Œ©] [CompactSpace Œ©]

/--
The maximum of a continuous function over `Œ©`.
-/
noncomputable def fmax {f : Œ© ‚Üí Œ≤} (cont : Continuous f) := f (compact_argmax cont)

/--
Given an algorithm `A`, the function that, given `Œµ` and `n`, returns
the measure of the set of sequences of size `n` such that the maximum of
`f` over these sequences is at least `Œµ` away from from `fmax`.
-/
def measure_dist_max (A : Algorithm Œ© Œ≤) {f : Œ© ‚Üí Œ≤} (cont : Continuous f) :=
  fun Œµ n => A.Œº f n {u | dist (Tuple.max (f ‚àò u)) (fmax cont) > Œµ}

/--
**Main definition**: An algorithm `A` is consistent over `f`
if for any `Œµ > 0`, `lim_(n ‚Üí ‚àû) measure_dist_max n = 0`.
-/
def isConsistent (A : Algorithm Œ© Œ≤) {f : Œ© ‚Üí Œ≤} (cont : Continuous f) : Prop :=
  ‚àÄ Œµ > 0, Tendsto (measure_dist_max A cont Œµ) atTop (ùìù 0)


/--
The set of all Lipschitz functions.
-/
def all_lipschitz := {f : Œ© ‚Üí Œ≤ | ‚àÉ Œ∫, LipschitzWith Œ∫ f}

/--
An algorithm `A` is consistent over all Lipschitz functions.
-/
def isConsistentOverLipschitz (A : Algorithm Œ© Œ≤) {f : Œ© ‚Üí Œ≤} (hf : f ‚àà all_lipschitz) : Prop :=
  isConsistent A hf.choose_spec.continuous

/--
Given a sequence `u`, maximum over `Œ©` of `min_dist_x u`: the maximum distance between
any element in `Œ©` and `u`.
-/
noncomputable def max_min_dist {n : ‚Ñï} (u : Fin n ‚Üí Œ©) :=
  min_dist_x u (compact_argmax (min_dist_x_continuous u))

/--
**Main definition**: Given a function `f`, an algorithm `A` sample the whole space
if `‚àÄ Œµ > 0, lim_(n ‚Üí ‚àû) A.Œº f n {u | max_min_dist u > Œµ} = 0`.
-/
noncomputable def sample_whole_space (A : Algorithm Œ© Œ≤) (f : Œ© ‚Üí Œ≤) : Prop :=
  ‚àÄ Œµ > 0, Tendsto (fun n => A.Œº f n {u | max_min_dist u > Œµ}) atTop (ùìù 0)

variable [SemilatticeSup Œ©]

example (A : Algorithm Œ© ‚Ñù) :
    (‚àÄ ‚¶Éf : Œ© ‚Üí ‚Ñù‚¶Ñ, f ‚àà all_lipschitz ‚Üí sample_whole_space A f)
    ‚Üî
    (‚àÄ ‚¶Éf : Œ© ‚Üí ‚Ñù‚¶Ñ, (hf : f ‚àà all_lipschitz) ‚Üí isConsistentOverLipschitz A hf)
    := by
  constructor
  ¬∑ intro h f hf Œµ hŒµ
    have hcont := hf.choose_spec.continuous

    suffices h' : ‚àÉ Œ¥ > 0, ‚àÄ n > 0,
        {(u : Fin n ‚Üí Œ©) | dist (Tuple.max (f ‚àò u)) (fmax hcont) > Œµ} ‚äÜ {u | max_min_dist u > Œ¥} by
      obtain ‚ü®Œ¥, hŒ¥, h'‚ü© := h'
      have Œº_mono : ‚àÄ n > 0, measure_dist_max A hcont Œµ n ‚â§ (A.Œº f n) {u | max_min_dist u > Œ¥} :=
        fun n hn => MeasureTheory.OuterMeasureClass.measure_mono (A.Œº f n) (h' n hn)
      exact Tendsto.tendsto_zero_le_nat Œº_mono (h hf Œ¥ hŒ¥)

    let X‚Çë := {x | dist (f x) (fmax hcont) ‚â§ Œµ}
    let x' := compact_argmax hcont
    have : f x' = fmax hcont := rfl
    obtain ‚ü®Œ¥, hŒ¥, hdist‚ü© := (Metric.continuous_iff.mp hcont) x' Œµ hŒµ
    let B := Metric.ball x' Œ¥
    have : B ‚äÜ X‚Çë := by
      intro e he
      rw [this] at hdist
      exact le_of_lt (hdist e he)
    use Œ¥
    refine ‚ü®hŒ¥, ?_‚ü©
    intro n n_pos
    -- R√©√©crire la preuve proprement
    have : {(u : (Fin n) ‚Üí Œ©) | dist (Tuple.max (f ‚àò u)) (fmax hcont) > Œµ} ‚äÜ
        {u | ‚àÄ i, u i ‚àâ B} := by
      intro e (he : dist (Tuple.max (f ‚àò e)) (fmax hcont) > Œµ)
      intro i
      set ei := e i
      by_contra hcontra
      specialize hdist ei hcontra
      rw [Compact.dist_max_compact hcont ei] at hdist
      have univ_ne : Nonempty (Fin n) := Fin.pos_iff_nonempty.mp n_pos
      obtain ‚ü®j, hj‚ü© := arg_tuple_max f n_pos e
      rw [‚Üêhj] at he
      unfold fmax at he
      rw [Compact.dist_max_compact hcont (e j)] at he
      have : f ei ‚â§ f (e j) := by
        rw [hj]
        exact Tuple.le_max (f ‚àò e) n_pos i
      have : f (compact_argmax hcont) - f (e j) ‚â§ f (compact_argmax hcont) - f ei :=
        tsub_le_tsub_left this _
      have : f (compact_argmax hcont) - f (e j) < Œµ := lt_of_le_of_lt this hdist
      linarith

    sorry
  sorry
